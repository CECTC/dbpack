/*
 * Copyright 2022 CECTC, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: undo_log.proto

package undolog

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PbSqlUndoLog struct {
	SqlType              int32           `protobuf:"varint,1,opt,name=SqlType,proto3" json:"SqlType,omitempty"`
	SchemaName           string          `protobuf:"bytes,2,opt,name=SchemaName,proto3" json:"SchemaName,omitempty"`
	TableName            string          `protobuf:"bytes,3,opt,name=TableName,proto3" json:"TableName,omitempty"`
	LockKey              string          `protobuf:"bytes,4,opt,name=LockKey,proto3" json:"LockKey,omitempty"`
	BeforeImage          *PbTableRecords `protobuf:"bytes,5,opt,name=BeforeImage,proto3" json:"BeforeImage,omitempty"`
	AfterImage           *PbTableRecords `protobuf:"bytes,6,opt,name=AfterImage,proto3" json:"AfterImage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PbSqlUndoLog) Reset()         { *m = PbSqlUndoLog{} }
func (m *PbSqlUndoLog) String() string { return proto.CompactTextString(m) }
func (*PbSqlUndoLog) ProtoMessage()    {}
func (*PbSqlUndoLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c8c28d37170efce, []int{0}
}
func (m *PbSqlUndoLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PbSqlUndoLog.Unmarshal(m, b)
}
func (m *PbSqlUndoLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PbSqlUndoLog.Marshal(b, m, deterministic)
}
func (m *PbSqlUndoLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PbSqlUndoLog.Merge(m, src)
}
func (m *PbSqlUndoLog) XXX_Size() int {
	return xxx_messageInfo_PbSqlUndoLog.Size(m)
}
func (m *PbSqlUndoLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PbSqlUndoLog.DiscardUnknown(m)
}

var xxx_messageInfo_PbSqlUndoLog proto.InternalMessageInfo

func (m *PbSqlUndoLog) GetSqlType() int32 {
	if m != nil {
		return m.SqlType
	}
	return 0
}

func (m *PbSqlUndoLog) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *PbSqlUndoLog) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *PbSqlUndoLog) GetLockKey() string {
	if m != nil {
		return m.LockKey
	}
	return ""
}

func (m *PbSqlUndoLog) GetBeforeImage() *PbTableRecords {
	if m != nil {
		return m.BeforeImage
	}
	return nil
}

func (m *PbSqlUndoLog) GetAfterImage() *PbTableRecords {
	if m != nil {
		return m.AfterImage
	}
	return nil
}

type PbBranchUndoLog struct {
	Xid                  string          `protobuf:"bytes,1,opt,name=Xid,proto3" json:"Xid,omitempty"`
	BranchID             int64           `protobuf:"varint,2,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	SqlUndoLogs          []*PbSqlUndoLog `protobuf:"bytes,3,rep,name=SqlUndoLogs,proto3" json:"SqlUndoLogs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PbBranchUndoLog) Reset()         { *m = PbBranchUndoLog{} }
func (m *PbBranchUndoLog) String() string { return proto.CompactTextString(m) }
func (*PbBranchUndoLog) ProtoMessage()    {}
func (*PbBranchUndoLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c8c28d37170efce, []int{1}
}
func (m *PbBranchUndoLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PbBranchUndoLog.Unmarshal(m, b)
}
func (m *PbBranchUndoLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PbBranchUndoLog.Marshal(b, m, deterministic)
}
func (m *PbBranchUndoLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PbBranchUndoLog.Merge(m, src)
}
func (m *PbBranchUndoLog) XXX_Size() int {
	return xxx_messageInfo_PbBranchUndoLog.Size(m)
}
func (m *PbBranchUndoLog) XXX_DiscardUnknown() {
	xxx_messageInfo_PbBranchUndoLog.DiscardUnknown(m)
}

var xxx_messageInfo_PbBranchUndoLog proto.InternalMessageInfo

func (m *PbBranchUndoLog) GetXid() string {
	if m != nil {
		return m.Xid
	}
	return ""
}

func (m *PbBranchUndoLog) GetBranchID() int64 {
	if m != nil {
		return m.BranchID
	}
	return 0
}

func (m *PbBranchUndoLog) GetSqlUndoLogs() []*PbSqlUndoLog {
	if m != nil {
		return m.SqlUndoLogs
	}
	return nil
}

func init() {
	proto.RegisterType((*PbSqlUndoLog)(nil), "undolog.PbSqlUndoLog")
	proto.RegisterType((*PbBranchUndoLog)(nil), "undolog.PbBranchUndoLog")
}

func init() { proto.RegisterFile("undo_log.proto", fileDescriptor_5c8c28d37170efce) }

var fileDescriptor_5c8c28d37170efce = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0xb1, 0xad, 0x99, 0x88, 0xca, 0x8a, 0xb8, 0x14, 0x91, 0xd0, 0x53, 0x4e, 0x39,
	0xd4, 0x43, 0x11, 0x4f, 0x16, 0x2f, 0xc5, 0x22, 0x61, 0x53, 0x41, 0xbc, 0x94, 0xfc, 0x99, 0xa6,
	0xe2, 0x26, 0xd3, 0x6e, 0x23, 0xd8, 0xef, 0xed, 0x07, 0x90, 0x6c, 0x1a, 0xb3, 0x27, 0x6f, 0x79,
	0xf3, 0x7e, 0xf3, 0xe7, 0x65, 0xe1, 0xec, 0xab, 0xcc, 0x68, 0x29, 0x29, 0x0f, 0x36, 0x8a, 0x2a,
	0x62, 0x83, 0x5a, 0x4b, 0xca, 0x87, 0x97, 0x55, 0x9c, 0x48, 0x5c, 0x2a, 0x4c, 0x49, 0x65, 0xbb,
	0xc6, 0x1d, 0xfd, 0x58, 0x70, 0x1a, 0x26, 0xd1, 0x56, 0xbe, 0x96, 0x19, 0xcd, 0x29, 0x67, 0x1c,
	0x06, 0xd1, 0x56, 0x2e, 0xf6, 0x1b, 0xe4, 0x96, 0x67, 0xf9, 0x3d, 0xd1, 0x4a, 0x76, 0x0b, 0x10,
	0xa5, 0x6b, 0x2c, 0xe2, 0x97, 0xb8, 0x40, 0x7e, 0xe4, 0x59, 0xbe, 0x23, 0x8c, 0x0a, 0xbb, 0x01,
	0x67, 0x51, 0x6f, 0xd0, 0xb6, 0xad, 0xed, 0xae, 0x50, 0xcf, 0x9d, 0x53, 0xfa, 0xf9, 0x8c, 0x7b,
	0x7e, 0xac, 0xbd, 0x56, 0xb2, 0x7b, 0x70, 0xa7, 0xb8, 0x22, 0x85, 0xb3, 0x22, 0xce, 0x91, 0xf7,
	0x3c, 0xcb, 0x77, 0xc7, 0xd7, 0xc1, 0xe1, 0xec, 0x20, 0x4c, 0xf4, 0x10, 0xd1, 0x9c, 0x2d, 0x4c,
	0x96, 0x4d, 0x00, 0x1e, 0x57, 0x15, 0xaa, 0xa6, 0xb3, 0xff, 0x7f, 0xa7, 0x81, 0x8e, 0xbe, 0xe1,
	0x3c, 0x4c, 0xa6, 0x2a, 0x2e, 0xd3, 0x75, 0x1b, 0xfc, 0x02, 0xec, 0xb7, 0x8f, 0x4c, 0x87, 0x76,
	0x44, 0xfd, 0xc9, 0x86, 0x70, 0xd2, 0x20, 0xb3, 0x27, 0x1d, 0xd7, 0x16, 0x7f, 0x9a, 0x4d, 0xc0,
	0xed, 0x7e, 0xda, 0x8e, 0xdb, 0x9e, 0xed, 0xbb, 0xe3, 0x2b, 0x63, 0x75, 0xe7, 0x0a, 0x93, 0x9c,
	0xba, 0xef, 0x4e, 0xf0, 0x70, 0xc0, 0x92, 0xbe, 0x7e, 0x84, 0xbb, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x0c, 0x65, 0x60, 0xb4, 0x01, 0x00, 0x00,
}
