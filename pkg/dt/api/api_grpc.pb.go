/*
 * Copyright 2022 CECTC, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionManagerServiceClient is the client API for TransactionManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionManagerServiceClient interface {
	Begin(ctx context.Context, in *GlobalBeginRequest, opts ...grpc.CallOption) (*GlobalBeginResponse, error)
	Commit(ctx context.Context, in *GlobalCommitRequest, opts ...grpc.CallOption) (*GlobalCommitResponse, error)
	Rollback(ctx context.Context, in *GlobalRollbackRequest, opts ...grpc.CallOption) (*GlobalRollbackResponse, error)
}

type transactionManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionManagerServiceClient(cc grpc.ClientConnInterface) TransactionManagerServiceClient {
	return &transactionManagerServiceClient{cc}
}

func (c *transactionManagerServiceClient) Begin(ctx context.Context, in *GlobalBeginRequest, opts ...grpc.CallOption) (*GlobalBeginResponse, error) {
	out := new(GlobalBeginResponse)
	err := c.cc.Invoke(ctx, "/api.TransactionManagerService/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerServiceClient) Commit(ctx context.Context, in *GlobalCommitRequest, opts ...grpc.CallOption) (*GlobalCommitResponse, error) {
	out := new(GlobalCommitResponse)
	err := c.cc.Invoke(ctx, "/api.TransactionManagerService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerServiceClient) Rollback(ctx context.Context, in *GlobalRollbackRequest, opts ...grpc.CallOption) (*GlobalRollbackResponse, error) {
	out := new(GlobalRollbackResponse)
	err := c.cc.Invoke(ctx, "/api.TransactionManagerService/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionManagerServiceServer is the server API for TransactionManagerService service.
// All implementations should embed UnimplementedTransactionManagerServiceServer
// for forward compatibility
type TransactionManagerServiceServer interface {
	Begin(context.Context, *GlobalBeginRequest) (*GlobalBeginResponse, error)
	Commit(context.Context, *GlobalCommitRequest) (*GlobalCommitResponse, error)
	Rollback(context.Context, *GlobalRollbackRequest) (*GlobalRollbackResponse, error)
}

// UnimplementedTransactionManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionManagerServiceServer struct {
}

func (UnimplementedTransactionManagerServiceServer) Begin(context.Context, *GlobalBeginRequest) (*GlobalBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedTransactionManagerServiceServer) Commit(context.Context, *GlobalCommitRequest) (*GlobalCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTransactionManagerServiceServer) Rollback(context.Context, *GlobalRollbackRequest) (*GlobalRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}

// UnsafeTransactionManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionManagerServiceServer will
// result in compilation errors.
type UnsafeTransactionManagerServiceServer interface {
	mustEmbedUnimplementedTransactionManagerServiceServer()
}

func RegisterTransactionManagerServiceServer(s grpc.ServiceRegistrar, srv TransactionManagerServiceServer) {
	s.RegisterService(&TransactionManagerService_ServiceDesc, srv)
}

func _TransactionManagerService_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TransactionManagerService/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).Begin(ctx, req.(*GlobalBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManagerService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TransactionManagerService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).Commit(ctx, req.(*GlobalCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManagerService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TransactionManagerService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).Rollback(ctx, req.(*GlobalRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionManagerService_ServiceDesc is the grpc.ServiceDesc for TransactionManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TransactionManagerService",
	HandlerType: (*TransactionManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _TransactionManagerService_Begin_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TransactionManagerService_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _TransactionManagerService_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
