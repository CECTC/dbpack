/*
 * Copyright 2022 CECTC, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package api;

option go_package=".;api";

enum ResultCode {
    ResultCodeFailed = 0;
    ResultCodeSuccess = 1;
}

message GlobalSession {
    enum GlobalStatus {
        Begin = 0;

        Committing = 1;

        Rollbacking = 2;

        Finished = 3;
    }


    string XID = 1;
    string ApplicationID = 2;
    int64 TransactionID = 3;
    string TransactionName = 4;
    int32 Timeout = 5;
    int64 BeginTime = 6;
    GlobalStatus Status = 7;
}

message BranchSession {
    enum BranchType {
        AT = 0;

        TCC = 1;

        SAGA = 2;

        XA = 3;
    }

    enum BranchStatus {
        Registered = 0;

        PhaseOneFailed = 1;

        PhaseTwoCommitting = 2;

        PhaseTwoRollbacking = 3;

        Complete = 4;
    }


    string BranchID = 1;
    string ApplicationID = 2;
    int64 BranchSessionID = 3;
    string XID = 4 ;
    int64 TransactionID = 5;
    string ResourceID = 6;
    string LockKey = 7;
    BranchType Type = 8;
    BranchStatus Status = 9;
    bytes ApplicationData = 10;
    int64 BeginTime = 11;
}

/* GlobalBeginRequest represents a global transaction begin */
message GlobalBeginRequest {
    string ApplicationID = 1;
    int32 Timeout = 2;
    string TransactionName = 3;
}

/* GlobalBeginResponse represents a response to GlobalBeginRequest */
message GlobalBeginResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    string XID = 4;
}

/* BranchRegisterRequest represents a branch transaction join in the global transaction */
message BranchRegisterRequest {
    string XID = 1;
    string ResourceID = 2;
    string LockKey = 3;
    BranchSession.BranchType BranchType = 4;
    bytes ApplicationData = 5;
}

/* BranchRegisterResponse represents a response to BranchRegisterRequest */
message BranchRegisterResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    string BranchID = 3;
    int64 BranchSessionID = 4;
}

/* BranchReportRequest represents a request to report branch transaction execution status */
message BranchReportRequest {
    string BranchID = 1;
    BranchSession.BranchStatus BranchStatus = 2;
}

/* BranchReportResponse represents a response to BranchReportRequest */
message BranchReportResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
}

/* GlobalLockQueryRequest represents a request to query the global lock */
message GlobalLockQueryRequest {
    string ResourceID = 1;
    string LockKey = 2;
}

/* GlobalLockQueryResponse represents a response to GlobalLockQueryRequest */
message GlobalLockQueryResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    bool Lockable = 3;
}

/* GlobalStatusRequest represents a request to query the global transaction status */
message GlobalStatusRequest {
    string XID = 1;
}

/* GlobalStatusResponse represents a response to GlobalStatusRequest */
message GlobalStatusResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    GlobalSession.GlobalStatus GlobalStatus = 3;
}

/* GlobalCommitRequest represents a request to commit global transaction */
message GlobalCommitRequest {
    string XID = 1;
}

/* GlobalCommitResponse represents a response to GlobalCommitRequest */
message GlobalCommitResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    GlobalSession.GlobalStatus GlobalStatus = 3;
}

/* GlobalRollbackRequest represents a request to rollback global transaction */
message GlobalRollbackRequest {
    string XID = 1;
}

/* GlobalRollbackResponse represents a response to GlobalRollbackRequest */
message GlobalRollbackResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    GlobalSession.GlobalStatus GlobalStatus = 3;
}

/* GlobalReportRequest represents a request to report global transaction execution status */
message GlobalReportRequest {
    string XID = 1;
    GlobalSession.GlobalStatus GlobalStatus = 2;
}

/* GlobalReportResponse represents a response to GlobalReportRequest */
message GlobalReportResponse {
    ResultCode ResultCode = 1;
    string Message = 2;
    GlobalSession.GlobalStatus GlobalStatus = 3;
}



service TransactionManagerService {
    rpc Begin(GlobalBeginRequest) returns (GlobalBeginResponse);
    rpc Commit(GlobalCommitRequest) returns (GlobalCommitResponse);
    rpc Rollback(GlobalRollbackRequest) returns (GlobalRollbackResponse);
}