// Code generated by goyacc DO NOT EDIT.


/*
 * Copyright 2022 CECTC, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Copyright 2020 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

package parser

import (
	__yyfmt__ "fmt"
	"strconv"

	"github.com/cectc/dbpack/third_party/parser/ast"
	"github.com/cectc/dbpack/third_party/parser/model"
)


type yyhintSymType struct {
	yys    int
	offset  int
	ident   string
	number  uint64
	hint    *ast.TableOptimizerHint
	hints []*ast.TableOptimizerHint
	table 	ast.HintTable
	modelIdents []model.CIStr
}

type yyhintXError struct {
	state, xsym int
}

const (
	yyhintDefault            = 57386
	yyhintEOFCode            = 57344
	yyhintErrCode            = 57345
	hintBKA                  = 57354
	hintBNL                  = 57356
	hintDupsWeedOut          = 57382
	hintFirstMatch           = 57383
	hintGlobalLock           = 57377
	hintHashJoin             = 57358
	hintIdentifier           = 57347
	hintIndexMerge           = 57362
	hintIntLit               = 57346
	hintJoinFixedOrder       = 57350
	hintJoinOrder            = 57351
	hintJoinPrefix           = 57352
	hintJoinSuffix           = 57353
	hintLooseScan            = 57384
	hintMRR                  = 57364
	hintMaterialization      = 57385
	hintMaxExecutionTime     = 57372
	hintMerge                = 57360
	hintNoBKA                = 57355
	hintNoBNL                = 57357
	hintNoHashJoin           = 57359
	hintNoICP                = 57366
	hintNoIndexMerge         = 57363
	hintNoMRR                = 57365
	hintNoMerge              = 57361
	hintNoRangeOptimization  = 57367
	hintNoSemijoin           = 57371
	hintNoSkipScan           = 57369
	hintPartition            = 57381
	hintQBName               = 57375
	hintResourceGroup        = 57374
	hintSemijoin             = 57370
	hintSetVar               = 57373
	hintShadow               = 57380
	hintSingleAtIdentifier   = 57348
	hintSkipScan             = 57368
	hintStringLit            = 57349
	hintTraceParent          = 57379
	hintUseDB                = 57378
	hintXID                  = 57376

	yyhintMaxDepth = 200
	yyhintTabOfs   = -107
)

var (
	yyhintXLAT = map[int]int{
		    41:   0, // ')' (90x)
		 57354:   1, // hintBKA (90x)
		 57356:   2, // hintBNL (90x)
		 57377:   3, // hintGlobalLock (90x)
		 57358:   4, // hintHashJoin (90x)
		 57362:   5, // hintIndexMerge (90x)
		 57350:   6, // hintJoinFixedOrder (90x)
		 57351:   7, // hintJoinOrder (90x)
		 57352:   8, // hintJoinPrefix (90x)
		 57353:   9, // hintJoinSuffix (90x)
		 57372:  10, // hintMaxExecutionTime (90x)
		 57360:  11, // hintMerge (90x)
		 57364:  12, // hintMRR (90x)
		 57355:  13, // hintNoBKA (90x)
		 57357:  14, // hintNoBNL (90x)
		 57359:  15, // hintNoHashJoin (90x)
		 57366:  16, // hintNoICP (90x)
		 57363:  17, // hintNoIndexMerge (90x)
		 57361:  18, // hintNoMerge (90x)
		 57365:  19, // hintNoMRR (90x)
		 57367:  20, // hintNoRangeOptimization (90x)
		 57371:  21, // hintNoSemijoin (90x)
		 57369:  22, // hintNoSkipScan (90x)
		 57375:  23, // hintQBName (90x)
		 57374:  24, // hintResourceGroup (90x)
		 57370:  25, // hintSemijoin (90x)
		 57373:  26, // hintSetVar (90x)
		 57380:  27, // hintShadow (90x)
		 57368:  28, // hintSkipScan (90x)
		 57379:  29, // hintTraceParent (90x)
		 57378:  30, // hintUseDB (90x)
		 57376:  31, // hintXID (90x)
		    44:  32, // ',' (81x)
		 57382:  33, // hintDupsWeedOut (72x)
		 57383:  34, // hintFirstMatch (72x)
		 57384:  35, // hintLooseScan (72x)
		 57385:  36, // hintMaterialization (72x)
		 57347:  37, // hintIdentifier (69x)
		 57348:  38, // hintSingleAtIdentifier (46x)
		 57381:  39, // hintPartition (41x)
		    40:  40, // '(' (38x)
		    46:  41, // '.' (37x)
		    61:  42, // '=' (37x)
		 57344:  43, // $end (20x)
		 57392:  44, // Identifier (16x)
		 57400:  45, // QueryBlockOpt (10x)
		 57346:  46, // hintIntLit (7x)
		 57349:  47, // hintStringLit (4x)
		 57389:  48, // HintTable (4x)
		 57410:  49, // Value (4x)
		 57387:  50, // CommaOpt (3x)
		 57390:  51, // HintTableList (3x)
		 57391:  52, // HintTableListOpt (2x)
		 57395:  53, // JoinOrderOptimizerHintName (2x)
		 57396:  54, // NullaryHintName (2x)
		 57399:  55, // PartitionListOpt (2x)
		 57402:  56, // SubqueryOptimizerHintName (2x)
		 57405:  57, // SubqueryStrategy (2x)
		 57406:  58, // SupportedTableLevelOptimizerHintName (2x)
		 57407:  59, // TableOptimizerHintOpt (2x)
		 57408:  60, // UnsupportedIndexLevelOptimizerHintName (2x)
		 57409:  61, // UnsupportedTableLevelOptimizerHintName (2x)
		 57388:  62, // HintIndexList (1x)
		 57393:  63, // IndexNameList (1x)
		 57394:  64, // IndexNameListOpt (1x)
		 57397:  65, // OptimizerHintList (1x)
		 57398:  66, // PartitionList (1x)
		 57401:  67, // Start (1x)
		 57403:  68, // SubqueryStrategies (1x)
		 57404:  69, // SubqueryStrategiesOpt (1x)
		 57386:  70, // $default (0x)
		 57345:  71, // error (0x)
	}

	yyhintSymNames = []string{
		"')'",
		"hintBKA",
		"hintBNL",
		"hintGlobalLock",
		"hintHashJoin",
		"hintIndexMerge",
		"hintJoinFixedOrder",
		"hintJoinOrder",
		"hintJoinPrefix",
		"hintJoinSuffix",
		"hintMaxExecutionTime",
		"hintMerge",
		"hintMRR",
		"hintNoBKA",
		"hintNoBNL",
		"hintNoHashJoin",
		"hintNoICP",
		"hintNoIndexMerge",
		"hintNoMerge",
		"hintNoMRR",
		"hintNoRangeOptimization",
		"hintNoSemijoin",
		"hintNoSkipScan",
		"hintQBName",
		"hintResourceGroup",
		"hintSemijoin",
		"hintSetVar",
		"hintShadow",
		"hintSkipScan",
		"hintTraceParent",
		"hintUseDB",
		"hintXID",
		"','",
		"hintDupsWeedOut",
		"hintFirstMatch",
		"hintLooseScan",
		"hintMaterialization",
		"hintIdentifier",
		"hintSingleAtIdentifier",
		"hintPartition",
		"'('",
		"'.'",
		"'='",
		"$end",
		"Identifier",
		"QueryBlockOpt",
		"hintIntLit",
		"hintStringLit",
		"HintTable",
		"Value",
		"CommaOpt",
		"HintTableList",
		"HintTableListOpt",
		"JoinOrderOptimizerHintName",
		"NullaryHintName",
		"PartitionListOpt",
		"SubqueryOptimizerHintName",
		"SubqueryStrategy",
		"SupportedTableLevelOptimizerHintName",
		"TableOptimizerHintOpt",
		"UnsupportedIndexLevelOptimizerHintName",
		"UnsupportedTableLevelOptimizerHintName",
		"HintIndexList",
		"IndexNameList",
		"IndexNameListOpt",
		"OptimizerHintList",
		"PartitionList",
		"Start",
		"SubqueryStrategies",
		"SubqueryStrategiesOpt",
		"$default",
		"error",
	}

	yyhintReductions = []struct{xsym, components int}{
		{0, 1},
		{67, 1},
		{65, 1},
		{65, 3},
		{59, 4},
		{59, 4},
		{59, 4},
		{59, 4},
		{59, 4},
		{59, 5},
		{59, 5},
		{59, 6},
		{59, 4},
		{59, 4},
		{59, 4},
		{59, 3},
		{59, 4},
		{59, 4},
		{59, 3},
		{59, 4},
		{45, 0},
		{45, 1},
		{50, 0},
		{50, 1},
		{55, 0},
		{55, 4},
		{66, 1},
		{66, 3},
		{52, 1},
		{52, 1},
		{51, 2},
		{51, 3},
		{48, 3},
		{48, 5},
		{62, 4},
		{64, 0},
		{64, 1},
		{63, 1},
		{63, 3},
		{69, 0},
		{69, 1},
		{68, 1},
		{68, 3},
		{49, 1},
		{49, 1},
		{49, 1},
		{53, 1},
		{53, 1},
		{53, 1},
		{61, 1},
		{61, 1},
		{61, 1},
		{61, 1},
		{61, 1},
		{61, 1},
		{61, 1},
		{58, 1},
		{60, 1},
		{60, 1},
		{60, 1},
		{60, 1},
		{60, 1},
		{60, 1},
		{60, 1},
		{56, 1},
		{56, 1},
		{57, 1},
		{57, 1},
		{57, 1},
		{57, 1},
		{54, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
		{44, 1},
	}

	yyhintXErrors = map[yyhintXError]string{
	}

	yyhintParseTab = [170][]uint16{
		// 0
		{1: 130, 132, 122, 137, 138, 111, 127, 128, 129, 117, 135, 139, 131, 133, 134, 141, 147, 136, 140, 142, 146, 144, 120, 119, 145, 118, 125, 143, 124, 123, 121, 53: 112, 126, 56: 116, 58: 114, 110, 115, 113, 65: 109, 67: 108},
		{43: 107},
		{1: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 236, 43: 106, 50: 275},
		{1: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 43: 105},
		{40: 272},
		// 5
		{40: 268},
		{40: 265},
		{40: 257},
		{40: 231},
		{40: 219},
		// 10
		{40: 215},
		{40: 210},
		{40: 207},
		{40: 204},
		{40: 201},
		// 15
		{40: 199},
		{40: 196},
		{40: 154},
		{40: 152},
		{40: 148},
		// 20
		{40: 61},
		{40: 60},
		{40: 59},
		{40: 58},
		{40: 57},
		// 25
		{40: 56},
		{40: 55},
		{40: 54},
		{40: 53},
		{40: 52},
		// 30
		{40: 51},
		{40: 50},
		{40: 49},
		{40: 48},
		{40: 47},
		// 35
		{40: 46},
		{40: 45},
		{40: 44},
		{40: 43},
		{40: 42},
		// 40
		{40: 37},
		{87, 38: 150, 45: 149},
		{151},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 39: 86, 46: 86},
		{1: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 43: 88},
		// 45
		{153},
		{1: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 43: 89},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 157, 46: 158, 156, 49: 155},
		{195},
		{64},
		// 50
		{63},
		{62},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 41: 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 41: 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 41: 34, 34},
		// 55
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 41: 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 41: 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 41: 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 41: 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 41: 29, 29},
		// 60
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 41: 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 41: 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 41: 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 41: 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 41: 24, 24},
		// 65
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 41: 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 41: 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 41: 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 41: 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 41: 19, 19},
		// 70
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 41: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 41: 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41: 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 41: 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 41: 14, 14},
		// 75
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 41: 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 41: 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 41: 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 41: 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 41: 9, 9},
		// 80
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 41: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 41: 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 41: 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 41: 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 41: 4, 4},
		// 85
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 41: 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 41: 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 41: 1, 1},
		{1: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 43: 90},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 157, 46: 158, 156, 49: 197},
		// 90
		{198},
		{1: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 43: 91},
		{200},
		{1: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 43: 92},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 157, 46: 158, 156, 49: 202},
		// 95
		{203},
		{1: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 43: 93},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 205},
		{206},
		{1: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 43: 94},
		// 100
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 208},
		{209},
		{1: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 43: 95},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 211},
		{42: 212},
		// 105
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 157, 46: 158, 156, 49: 213},
		{214},
		{1: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 43: 96},
		{38: 150, 45: 216, 87},
		{46: 217},
		// 110
		{218},
		{1: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 43: 97},
		{87, 33: 87, 87, 87, 87, 38: 150, 45: 220},
		{68, 33: 224, 225, 226, 227, 57: 223, 68: 222, 221},
		{230},
		// 115
		{67, 32: 228},
		{66, 32: 66},
		{41, 32: 41},
		{40, 32: 40},
		{39, 32: 39},
		// 120
		{38, 32: 38},
		{33: 224, 225, 226, 227, 57: 229},
		{65, 32: 65},
		{1: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 43: 98},
		{1: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 150, 45: 233, 62: 232},
		// 125
		{256},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 234, 48: 235},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 150, 87, 41: 244, 45: 243},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 236, 85, 85, 85, 85, 85, 50: 237},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 33: 84, 84, 84, 84, 84},
		// 130
		{72, 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 240, 63: 239, 238},
		{73},
		{71, 32: 241},
		{70, 32: 70},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 242},
		// 135
		{69, 32: 69},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 39: 247, 55: 255},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 245},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 150, 87, 45: 246},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 39: 247, 55: 248},
		// 140
		{40: 249},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 251, 66: 250},
		{252, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 236, 85, 85, 85, 85, 85, 50: 253},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		// 145
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 254},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{1: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 43: 99},
		// 150
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 150, 45: 260, 51: 259, 258},
		{264},
		{79, 32: 262},
		{78, 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 234, 48: 261},
		{77, 32: 77},
		// 155
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 234, 48: 263},
		{76, 32: 76},
		{1: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 43: 100},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 150, 45: 260, 51: 259, 266},
		{267},
		// 160
		{1: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 43: 101},
		{1: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 150, 45: 270, 51: 269},
		{271, 32: 262},
		{1: 164, 166, 187, 168, 172, 160, 161, 162, 163, 182, 170, 174, 165, 167, 169, 176, 173, 171, 175, 177, 181, 179, 185, 184, 180, 183, 190, 178, 189, 188, 186, 33: 191, 192, 193, 194, 159, 44: 234, 48: 261},
		{1: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 43: 102},
		// 165
		{87, 38: 150, 45: 273},
		{274},
		{1: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 43: 103},
		{1: 130, 132, 122, 137, 138, 111, 127, 128, 129, 117, 135, 139, 131, 133, 134, 141, 147, 136, 140, 142, 146, 144, 120, 119, 145, 118, 125, 143, 124, 123, 121, 53: 112, 126, 56: 116, 58: 114, 276, 115, 113},
		{1: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 43: 104},
	}
)

var yyhintDebug = 0

type yyhintLexer interface {
	Lex(lval *yyhintSymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	Errors() (warns []error, errs []error)
}

type yyhintLexerEx interface {
	yyhintLexer
	Reduced(rule, state int, lval *yyhintSymType) bool
}

func yyhintSymName(c int) (s string) {
	x, ok := yyhintXLAT[c]
	if ok {
		return yyhintSymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yyhintlex1(yylex yyhintLexer, lval *yyhintSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyhintEOFCode
	}
	if yyhintDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yyhintSymName(n), n, n, lval)
	}
	return n
}

func yyhintParse(yylex yyhintLexer, parser *hintParser) int {
	const yyError = 71

	yyEx, _ := yylex.(yyhintLexerEx)
	var yyn int
	parser.yylval = yyhintSymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yyhintlex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyhintXLAT[yychar]; !ok {
			yyxchar = len(yyhintSymNames) // > tab width
		}
	}
	if yyhintDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyhintParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyhintTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyhintDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyhintDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yyhintSymName(yychar), yystate)
			}
			msg, ok := yyhintXErrors[yyhintXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyhintParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError])+yyhintTabOfs
					if yyn > 0 { // hit
						if yyhintDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyhintDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyhintSymName(yychar))
			}
			if yychar == yyhintEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyhintReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyhintParseTab[yyS[yyp].yys][x])+yyhintTabOfs
	/* reduction by production r */
	if yyhintDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yyhintSymNames[x], yystate)
	}

	switch r {
	case 1: {
		parser.result = yyS[yypt-0].hints
	}
	case 2: {
		if yyS[yypt-0].hint != nil {
			parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
		}
	}
	case 3: {
		if yyS[yypt-0].hint != nil {
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
		} else {
			parser.yyVAL.hints = yyS[yypt-2].hints
		}
	}
	case 4: {
		parser.warnUnsupportedHint(yyS[yypt-3].ident)
		parser.yyVAL.hint = nil
	}
	case 5: {
		parser.warnUnsupportedHint(yyS[yypt-3].ident)
		parser.yyVAL.hint = nil
	}
	case 6: {
		parser.warnUnsupportedHint(yyS[yypt-3].ident)
		parser.yyVAL.hint = nil
	}
	case 7: {
		h := yyS[yypt-1].hint
		h.HintName = model.NewCIStr(yyS[yypt-3].ident)
		parser.yyVAL.hint = h
	}
	case 8: {
		parser.warnUnsupportedHint(yyS[yypt-3].ident)
		parser.yyVAL.hint = nil
	}
	case 9: {
		parser.warnUnsupportedHint(yyS[yypt-4].ident)
		parser.yyVAL.hint = nil
	}
	case 10: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			HintName: model.NewCIStr(yyS[yypt-4].ident),
			QBName:   model.NewCIStr(yyS[yypt-2].ident),
			HintData: yyS[yypt-1].number,
		}
	}
	case 11: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			HintName: model.NewCIStr(yyS[yypt-5].ident),
			HintData: ast.HintSetVar{
				VarName: yyS[yypt-3].ident,
				Value:   yyS[yypt-1].ident,
			},
		}
	}
	case 12: {
		parser.warnUnsupportedHint(yyS[yypt-3].ident)
		parser.yyVAL.hint = nil
	}
	case 13: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			HintName: model.NewCIStr(yyS[yypt-3].ident),
			QBName:   model.NewCIStr(yyS[yypt-1].ident),
		}
	}
	case 14: {
    	parser.yyVAL.hint = &ast.TableOptimizerHint{
            HintName: model.NewCIStr(yyS[yypt-3].ident),
            HintData: model.NewCIStr(yyS[yypt-1].ident),
        }
    }
	case 15: {
    	parser.yyVAL.hint = &ast.TableOptimizerHint{
            HintName: model.NewCIStr(yyS[yypt-2].ident),
        }
    }
	case 16: {
    	parser.yyVAL.hint = &ast.TableOptimizerHint{
            HintName: model.NewCIStr(yyS[yypt-3].ident),
            HintData: model.NewCIStr(yyS[yypt-1].ident),
        }
    }
	case 17: {
    	parser.yyVAL.hint = &ast.TableOptimizerHint{
            HintName: model.NewCIStr(yyS[yypt-3].ident),
            HintData: model.NewCIStr(yyS[yypt-1].ident),
        }
    }
	case 18: {
    	parser.yyVAL.hint = &ast.TableOptimizerHint{
            HintName: model.NewCIStr(yyS[yypt-2].ident),
        }
    }
	case 19: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			HintName: model.NewCIStr(yyS[yypt-3].ident),
			QBName:   model.NewCIStr(yyS[yypt-1].ident),
		}
	}
	case 20: {
		parser.yyVAL.ident = ""
	}
	case 24: {
		parser.yyVAL.modelIdents = nil
	}
	case 25: {
		parser.yyVAL.modelIdents = yyS[yypt-1].modelIdents
	}
	case 26: {
		parser.yyVAL.modelIdents = []model.CIStr{model.NewCIStr(yyS[yypt-0].ident)}
	}
	case 27: {
		parser.yyVAL.modelIdents = append(yyS[yypt-2].modelIdents, model.NewCIStr(yyS[yypt-0].ident))
	}
	case 29: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			QBName: model.NewCIStr(yyS[yypt-0].ident),
		}
	}
	case 30: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			Tables: []ast.HintTable{yyS[yypt-0].table},
			QBName: model.NewCIStr(yyS[yypt-1].ident),
		}
	}
	case 31: {
		h := yyS[yypt-2].hint
		h.Tables = append(h.Tables, yyS[yypt-0].table)
		parser.yyVAL.hint = h
	}
	case 32: {
		parser.yyVAL.table = ast.HintTable{
			TableName:     model.NewCIStr(yyS[yypt-2].ident),
			QBName:        model.NewCIStr(yyS[yypt-1].ident),
			PartitionList: yyS[yypt-0].modelIdents,
		}
	}
	case 33: {
		parser.yyVAL.table = ast.HintTable{
			DBName:        model.NewCIStr(yyS[yypt-4].ident),
			TableName:     model.NewCIStr(yyS[yypt-2].ident),
			QBName:        model.NewCIStr(yyS[yypt-1].ident),
			PartitionList: yyS[yypt-0].modelIdents,
		}
	}
	case 34: {
		h := yyS[yypt-0].hint
		h.Tables = []ast.HintTable{yyS[yypt-2].table}
		h.QBName = model.NewCIStr(yyS[yypt-3].ident)
		parser.yyVAL.hint = h
	}
	case 35: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{}
	}
	case 37: {
		parser.yyVAL.hint = &ast.TableOptimizerHint{
			Indexes: []model.CIStr{model.NewCIStr(yyS[yypt-0].ident)},
		}
	}
	case 38: {
		h := yyS[yypt-2].hint
		h.Indexes = append(h.Indexes, model.NewCIStr(yyS[yypt-0].ident))
		parser.yyVAL.hint = h
	}
	case 45: {
		parser.yyVAL.ident = strconv.FormatUint(yyS[yypt-0].number, 10)
	}

	}

	if !parser.lexer.skipPositionRecording {
		yyhintSetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
